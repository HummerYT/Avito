// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "AvitoTask/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockinsert is a mock of insert interface.
type Mockinsert struct {
	ctrl     *gomock.Controller
	recorder *MockinsertMockRecorder
}

// MockinsertMockRecorder is the mock recorder for Mockinsert.
type MockinsertMockRecorder struct {
	mock *Mockinsert
}

// NewMockinsert creates a new mock instance.
func NewMockinsert(ctrl *gomock.Controller) *Mockinsert {
	mock := &Mockinsert{ctrl: ctrl}
	mock.recorder = &MockinsertMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockinsert) EXPECT() *MockinsertMockRecorder {
	return m.recorder
}

// GetUserByLogin mocks base method.
func (m *Mockinsert) GetUserByLogin(ctx context.Context, login string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", ctx, login)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockinsertMockRecorder) GetUserByLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*Mockinsert)(nil).GetUserByLogin), ctx, login)
}

// InsertUser mocks base method.
func (m *Mockinsert) InsertUser(ctx context.Context, user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUser", ctx, user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertUser indicates an expected call of InsertUser.
func (mr *MockinsertMockRecorder) InsertUser(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUser", reflect.TypeOf((*Mockinsert)(nil).InsertUser), ctx, user)
}

// IsUserExists mocks base method.
func (m *Mockinsert) IsUserExists(ctx context.Context, user models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", ctx, user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockinsertMockRecorder) IsUserExists(ctx, user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*Mockinsert)(nil).IsUserExists), ctx, user)
}
